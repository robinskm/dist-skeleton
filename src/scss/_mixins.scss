// responsive breakpoints

// if the breakpoint exists in the map, get the breakpoint value & write the media query.
// otherwise, log a warning
// @include min-width(sm) {}
@mixin min-width($breakpoint) {
  @if map-has-key($breakpoints, $breakpoint) {
    $breakpoint-value: map-get($breakpoints, $breakpoint);
    @media (min-width: $breakpoint-value) {
      @content;
    }
  } @else {
    @warn 'Invalid breakpoint: #{$breakpoint}.';
  }
}

// @include max-width(sm) {}
@mixin max-width($breakpoint) {
  @if map-has-key($breakpoints, $breakpoint) {
    $breakpoint-value: map-get($breakpoints, $breakpoint);
    @media (max-width: ($breakpoint-value - 1)) {
      @content;
    }
  } @else {
    @warn 'Invalid breakpoint: #{$breakpoint}.';
  }
}


// if both the lower and upper breakpoints exists in the map, get the lower and upper breakpoints & write the media query.
// otherwise, log a warning
// @include respond-between(sm, md) {}
@mixin respond-between($lower, $upper) {
  @if map-has-key($breakpoints, $lower) and map-has-key($breakpoints, $upper) {
    $lower-breakpoint: map-get($breakpoints, $lower);
    $upper-breakpoint: map-get($breakpoints, $upper);
    @media (min-width: $lower-breakpoint) and (max-width: ($upper-breakpoint - 1)) {
      @content;
    }
  } @else {
    @if (map-has-key($breakpoints, $lower) == false) {
      @warn 'Your lower breakpoint was invalid: #{$lower}.';
    }
    @if (map-has-key($breakpoints, $upper) == false) {
      @warn 'Your upper breakpoint was invalid: #{$upper}.';
    }
  }
}

// cro-bro flexbox
@mixin flex {
    display:flex;
    display:-webkit-flex;
}

// cro-bro transform
@mixin transform($str) {
    -webkit-transform: #{$str};
    transform: #{$str};      
}
// cro-bro transition
@mixin transition($str) {
    -webkit-transition: #{$str};
    transition: #{$str};      
}

// cro-bro animation
@mixin animation($str) {
    -webkit-animation: #{$str};
    animation: #{$str};
}

// cro-bro -webkit-
@mixin webkit($style, $pos) {
    -webkit-#{$style}: $pos;
    #{$style}: $pos;
}

// ADA commpliant hover
@mixin hover {
    &:hover, &:focus {
        @content;
    }
}